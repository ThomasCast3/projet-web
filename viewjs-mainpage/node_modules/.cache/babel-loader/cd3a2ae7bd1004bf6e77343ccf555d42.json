{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPropsValues = getPropsValues;\nexports.bindProps = bindProps;\n\nvar _WatchPrimitiveProperties = require('../utils/WatchPrimitiveProperties');\n\nvar _WatchPrimitiveProperties2 = _interopRequireDefault(_WatchPrimitiveProperties);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getPropsValues(vueInst, props) {\n  return Object.keys(props).reduce(function (acc, prop) {\n    if (vueInst[prop] !== undefined) {\n      acc[prop] = vueInst[prop];\n    }\n\n    return acc;\n  }, {});\n}\n/**\n  * Binds the properties defined in props to the google maps instance.\n  * If the prop is an Object type, and we wish to track the properties\n  * of the object (e.g. the lat and lng of a LatLng), then we do a deep\n  * watch. For deep watch, we also prevent the _changed event from being\n  * emitted if the data source was external.\n  */\n\n\nfunction bindProps(vueInst, googleMapsInst, props) {\n  var _loop = function (attribute) {\n    var _props$attribute = props[attribute],\n        twoWay = _props$attribute.twoWay,\n        type = _props$attribute.type,\n        trackProperties = _props$attribute.trackProperties,\n        noBind = _props$attribute.noBind;\n    if (noBind) return 'continue';\n    var setMethodName = 'set' + capitalizeFirstLetter(attribute);\n    var getMethodName = 'get' + capitalizeFirstLetter(attribute);\n    var eventName = attribute.toLowerCase() + '_changed';\n    var initialValue = vueInst[attribute];\n\n    if (typeof googleMapsInst[setMethodName] === 'undefined') {\n      throw new Error(setMethodName + ' is not a method of (the Maps object corresponding to) ' + vueInst.$options._componentTag);\n    } // We need to avoid an endless\n    // propChanged -> event emitted -> propChanged -> event emitted loop\n    // although this may really be the user's responsibility\n\n\n    if (type !== Object || !trackProperties) {\n      // Track the object deeply\n      vueInst.$watch(attribute, function () {\n        var attributeValue = vueInst[attribute];\n        googleMapsInst[setMethodName](attributeValue);\n      }, {\n        immediate: typeof initialValue !== 'undefined',\n        deep: type === Object\n      });\n    } else {\n      (0, _WatchPrimitiveProperties2.default)(vueInst, trackProperties.map(function (prop) {\n        return attribute + '.' + prop;\n      }), function () {\n        googleMapsInst[setMethodName](vueInst[attribute]);\n      }, vueInst[attribute] !== undefined);\n    }\n\n    if (twoWay && (vueInst.$gmapOptions.autobindAllEvents || vueInst.$listeners[eventName])) {\n      googleMapsInst.addListener(eventName, function () {\n        // eslint-disable-line no-unused-vars\n        vueInst.$emit(eventName, googleMapsInst[getMethodName]());\n      });\n    }\n  };\n\n  for (var attribute in props) {\n    var _ret = _loop(attribute);\n\n    if (_ret === 'continue') continue;\n  }\n}","map":{"version":3,"sources":["/Users/thomas/Documents/GitHub/projet-web/viewjs-mainpage/node_modules/vue2-google-maps/dist/utils/bindProps.js"],"names":["Object","defineProperty","exports","value","getPropsValues","bindProps","_WatchPrimitiveProperties","require","_WatchPrimitiveProperties2","_interopRequireDefault","obj","__esModule","default","capitalizeFirstLetter","string","charAt","toUpperCase","slice","vueInst","props","keys","reduce","acc","prop","undefined","googleMapsInst","_loop","attribute","_props$attribute","twoWay","type","trackProperties","noBind","setMethodName","getMethodName","eventName","toLowerCase","initialValue","Error","$options","_componentTag","$watch","attributeValue","immediate","deep","map","$gmapOptions","autobindAllEvents","$listeners","addListener","$emit","_ret"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPropsValues = getPropsValues;\nexports.bindProps = bindProps;\n\nvar _WatchPrimitiveProperties = require('../utils/WatchPrimitiveProperties');\n\nvar _WatchPrimitiveProperties2 = _interopRequireDefault(_WatchPrimitiveProperties);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getPropsValues(vueInst, props) {\n  return Object.keys(props).reduce(function (acc, prop) {\n    if (vueInst[prop] !== undefined) {\n      acc[prop] = vueInst[prop];\n    }\n    return acc;\n  }, {});\n}\n\n/**\n  * Binds the properties defined in props to the google maps instance.\n  * If the prop is an Object type, and we wish to track the properties\n  * of the object (e.g. the lat and lng of a LatLng), then we do a deep\n  * watch. For deep watch, we also prevent the _changed event from being\n  * emitted if the data source was external.\n  */\nfunction bindProps(vueInst, googleMapsInst, props) {\n  var _loop = function (attribute) {\n    var _props$attribute = props[attribute],\n        twoWay = _props$attribute.twoWay,\n        type = _props$attribute.type,\n        trackProperties = _props$attribute.trackProperties,\n        noBind = _props$attribute.noBind;\n\n\n    if (noBind) return 'continue';\n\n    var setMethodName = 'set' + capitalizeFirstLetter(attribute);\n    var getMethodName = 'get' + capitalizeFirstLetter(attribute);\n    var eventName = attribute.toLowerCase() + '_changed';\n    var initialValue = vueInst[attribute];\n\n    if (typeof googleMapsInst[setMethodName] === 'undefined') {\n      throw new Error(setMethodName + ' is not a method of (the Maps object corresponding to) ' + vueInst.$options._componentTag);\n    }\n\n    // We need to avoid an endless\n    // propChanged -> event emitted -> propChanged -> event emitted loop\n    // although this may really be the user's responsibility\n    if (type !== Object || !trackProperties) {\n      // Track the object deeply\n      vueInst.$watch(attribute, function () {\n        var attributeValue = vueInst[attribute];\n\n        googleMapsInst[setMethodName](attributeValue);\n      }, {\n        immediate: typeof initialValue !== 'undefined',\n        deep: type === Object\n      });\n    } else {\n      (0, _WatchPrimitiveProperties2.default)(vueInst, trackProperties.map(function (prop) {\n        return attribute + '.' + prop;\n      }), function () {\n        googleMapsInst[setMethodName](vueInst[attribute]);\n      }, vueInst[attribute] !== undefined);\n    }\n\n    if (twoWay && (vueInst.$gmapOptions.autobindAllEvents || vueInst.$listeners[eventName])) {\n      googleMapsInst.addListener(eventName, function () {\n        // eslint-disable-line no-unused-vars\n        vueInst.$emit(eventName, googleMapsInst[getMethodName]());\n      });\n    }\n  };\n\n  for (var attribute in props) {\n    var _ret = _loop(attribute);\n\n    if (_ret === 'continue') continue;\n  }\n}"]},"metadata":{},"sourceType":"script"}